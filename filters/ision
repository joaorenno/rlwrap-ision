#!/usr/bin/env perl
# Author: Joao Renno
# Version: 0.3b
# Requires: ISION version 1.2.5 or later 
# Description: Filter used to provide autocomplete and piping to ISION's telnet session


use lib ($ENV{RLWRAP_FILTERDIR} or ".");
use RlwrapFilter;
use POSIX qw(:signal_h);
use strict;


my @signals = split /\s+/, `kill -l`; # yuck!
for (my $signo = 1; $signals[$signo-1]; $signo++) {
    if ($signals[$signo-1] eq 'WINCH') {       
	my $sigset_unblock = POSIX::SigSet->new($signo);
	unless (defined sigprocmask(SIG_UNBLOCK, $sigset_unblock)) {
	    die "Could not unblock signals: $!\n";
	}
    }
}

my $filter = new RlwrapFilter;
my $name = $filter -> name;
$filter -> help_text("Usage: rlwrap -z $name -w 200 <command>\n".
		     "add autocomplete and piping for ISION's telnet session");

my $raw_input;
my $pipeline;
my $prompt;
my $out_chunkno = 0;
my $wait_text = "wait...";

my $line_old = "";
my $at_first_prompt = 1;
my $ision_prompt = "-@#@#@#-"; # initializing with some random garbage
my @ision_commands;

my $mode = 0; # 0: advanced autocomplete; 1: simple autocomplete

$filter -> prompts_are_never_empty(1);
$filter -> input_handler(\&input);
$filter -> output_handler(\&output);
$filter -> prompt_handler(\&prompt);
$filter -> echo_handler(sub {$raw_input}); 

$filter -> completion_handler(\&complete);
$filter -> cloak_and_dagger_verbose(0); # set to 1 to spy on cloak_and_dagger dialogue

$filter -> run;

############################ subroutines ####################################

sub input {
  my $input;
  $raw_input = $_;
  ($input, undef, $pipeline) =  /([^|]*)(\|(.*))?/;
  return $input;
}


sub output {
  return ($pipeline ? ($out_chunkno++ == 0 ? $wait_text : "")  : $_);
}


sub prompt {
  my ($prompt) =  @_;
  $out_chunkno = 0;
	$_ = substr $prompt, -5;
	if (/^.*39m >$/ || /\[[cde]:\]>/) {	# test with or without alarm notification in prompt
		$ision_prompt = quotemeta($prompt);
		if ($pipeline) {
			$filter -> send_output_oob("\x08" x length($wait_text). "\n"); # erase $wait_text and go to new line
			local $SIG{PIPE} =  'IGNORE'; # we don't want to die if the pipeline quits 
			open PIPELINE, "| $pipeline";   
			print PIPELINE $filter->cumulative_output;
			close PIPELINE; # this waits until pipeline has finished
			undef $pipeline;
			$filter ->send_output_oob("\n"); # start prompt on new line
		} else {
			commands() unless @ision_commands;
		}
	}
	return $prompt;
}


sub commands {
	my $help_cmd = "help";
	my($line) = @_;
	if (index($line, $help_cmd) != -1)
	{
		$line =~ s/^\s*help\s*//;
	}
	my $line_args = "";
	my @line_args_aux = split /\s/,$line;
	my $line_args_count = 4;
	for (@line_args_aux) {
		if ($line_args_count > 0) {
			$line_args_count -= 1;
			$line_args = $line_args . " " . $_;
		}
	}
	my $help = $help_cmd . " " . $line_args;
	$help =~ s/\s+$//;
	@ision_commands = ();
  my $help_text = $filter -> cloak_and_dagger($help, $ision_prompt, 0.5);
	if ($help eq $help_cmd) {
		commands_help($line, $help_text);
	} else {
		commands_subcommand($line, $help_text);
	}
  $at_first_prompt = 0;
}


sub commands_help {
	my ($line, $help_text) = @_;
	@ision_commands = grep /^[A-Z][A-Z?]/, (split /\s+/, $help_text);
}


sub commands_subcommand {
	my ($line, $help_text) = @_;
	my @ision_commands_aux = grep /^\s*\[/, (split /\n+/, $help_text);
	for(@ision_commands_aux) {
		s/(.*\]):.*$/\1/;
	}
	if ($mode == 0) {		# advanced autocomplete
		my ($ision_maincommand) = $line =~ /^(\w+)/;
		my ($ision_subcommand) = $line =~ /^\w+\s+(.+)$/;
		my ($ision_lastcommand) = $line =~ /.*\s+(\/?\w+)\s*$/;
		my @ision_subcommand_array = ();
		my @ision_line_operator_array = ();
		my $ision_subcommand_flag = 0;
		for (@ision_commands_aux) {
			my $ision_line_subcommand = "";
			s/^\s+//;
			s/\s+$//;
			if (/^.*39m$/) {	# remove 'ALARM' message from results
				next;
			}
			if (/^\[([^<]\w+\|?\w*)\]$/) {
				$ision_line_subcommand = $1;
			} elsif ( /^\[([^<]\w+\|?\w*)\s+/) {
				$ision_line_subcommand = $1;
			} elsif (/\s+([^<]\w+\|?\w*)\s+/) {
				$ision_line_subcommand = $1;
			} elsif (/\s+([^<]\w+\|?\w*)\]$/) {
				$ision_line_subcommand = $1;
			}
			push @ision_subcommand_array, (split /\|/, $ision_line_subcommand);
			if ($ision_subcommand ne "" and index($ision_subcommand, $ision_line_subcommand) != -1) {		# parse the right lines
				$ision_subcommand_flag = 1;
				push @ision_line_operator_array, grep /^(?!.*<)/, split /\s*[\s\|]/;
				for (@ision_line_operator_array) {
					s/^\s+//;
					s/\s+$//;
					tr/[]//d;
				}
				@ision_line_operator_array = grep {index($ision_subcommand, $_) == -1} @ision_line_operator_array;
			}
			@ision_commands = @ision_line_operator_array;
		}
		if (not $ision_subcommand_flag) {	# push all subcommands
			@ision_commands = @ision_subcommand_array;
		}
	} else {		# simple autocomplete
		for (@ision_commands_aux) {
			push @ision_commands, grep /^[^<^\[].*[^\]]$/, (split /\s*[\s\|]/);
		}
	}
}


sub complete {
  my($line, $prefix, @completions) = @_;
	my $line_full = $line;
  my $nwords = scalar split /\s+/, $line;
  $nwords++ unless $prefix;
	$line =~ s/\Q$prefix\E$//;
	$line =~ s/^\s+//;
	$line =~ s/\s+$//;
	$line = lc($line);
	$prefix = lc($prefix);
	if ($line ne $line_old) {
		$line_old = $line;
		commands($line);
		if ($line_full =~ /\s+\/\w*$/) {
			@ision_commands = grep /^\//, @ision_commands;
			tr/\///d for @ision_commands;
		}
	}
	push @completions, grep /^\Q$prefix\E/, map { lc($_) } @ision_commands;
	return @completions;
}
